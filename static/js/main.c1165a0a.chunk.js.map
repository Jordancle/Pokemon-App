{"version":3,"sources":["SpriteDisplay.js","PokemonTypes.js","App.js","index.js"],"names":["SpriteDisplay","spriteUrl","src","PokemonTypes","types","join","replace","l","toUpperCase","nullPokemon","sprites","front_default","undefined","App","useState","loading","setLoading","setSpriteUrl","pokemonName","setPokemonName","pokemonTypes","setPokemonTypes","pokedexId","setPokedexId","generation","setGeneration","GetPokemonInfo","axios","get","GetPokemonSpeciesInfo","useEffect","Math","floor","random","Promise","all","then","results","pokemon","data","name","map","t","type","species","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAEe,SAASA,EAAT,GAAqC,IAAbC,EAAY,EAAZA,UAErC,OACE,qBAAKC,IAAKD,I,oBCHC,SAASE,EAAT,GAAkC,IAAVC,EAAS,EAATA,MACrC,OACE,8BAIGA,EAAMC,KAAK,MAAMC,QAAQ,SAAS,SAAAC,GAAC,OAAIA,EAAEC,mBCDhD,IAAMC,EAAc,CAClBC,QAAS,CAACC,mBAAeC,IAyHZC,MAtHf,WACE,MAA8BC,mBAASL,GAAvC,mBACA,GADA,UACsCK,mBAAS,KAA/C,mBACA,GADA,UAC4CA,mBAAS,sCAArD,mBACA,GADA,UACsCA,sBAAtC,mBACA,GADA,UACsCA,sBAAtC,mBACA,GADA,UAC8BA,oBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,qBAAlC,mBAAOb,EAAP,KAAkBgB,EAAlB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAkCP,qBAAlC,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAoCT,mBAAS,IAA7C,mBAAOU,EAAP,KAAmBC,EAAnB,KACA,EAA4DX,qBAA5D,mBA4CA,SAASY,EAAeJ,GAGtB,OAAOK,IAAMC,IAAI,qCAAuCN,GAa1D,SAASO,EAAsBP,GAG7B,OAAOK,IAAMC,IAAI,6CAA+CN,GAgBlE,OA/EA,UAEAQ,qBAAU,WACR,IAAMR,EAAYS,KAAKC,MAAsB,IAAhBD,KAAKE,UAClCjB,GAAW,GACXO,EAAaD,GAEbY,QAAQC,IAAI,CAACT,EAAeJ,GAAYO,EAAsBP,KAC3Dc,MAAK,SAAAC,GACJrB,GAAW,GACX,IAAMsB,EAAUD,EAAQ,GAAGE,KAC3BtB,EAAaqB,EAAQ5B,QAAQC,eAC7BQ,EAAemB,EAAQE,MACvBnB,EAAgBiB,EAAQlC,MAAMqC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAKH,SAE9C,IAAMI,EAAUP,EAAQ,GAAGE,KAC3Bd,EAAcmB,EAAQpB,WAAWgB,WAEpC,IA6DCzB,EAAgB,aAGlB,qCAOE,8BACGd,GAAa,cAACD,EAAD,CAAeC,UAAWA,MAE1C,8BACGiB,EAAYZ,QAAQ,SAAS,SAAAC,GAAC,OAAIA,EAAEC,mBAEvC,mDACmBc,KAEnB,8BACGE,EAAWlB,QAAQ,SAAS,SAAAC,GAAC,OAAIA,EAAEC,mBAEtC,cAACL,EAAD,CAAcC,MAAOgB,QCxH3ByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c1165a0a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function SpriteDisplay({spriteUrl}) {\r\n\r\n  return (\r\n    <img src={spriteUrl} />\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PokemonTypes({ types }) {\r\n  return (\r\n    <div>\r\n      {/* {types.map(t => (\r\n        <div key={t}>{t}</div>\r\n      ))} */}\r\n      {types.join(', ').replace(/\\b\\w/g, l => l.toUpperCase())}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport PokemonList from './PokemonList';\nimport Pagination from './Pagination';\nimport SpriteDisplay from './SpriteDisplay';\nimport axios from 'axios';\nimport PokemonTypes from './PokemonTypes';\n\nconst nullPokemon = {\n  sprites: {front_default: undefined}\n}\n\nfunction App() {\n  const [pokemon, setPokemon] = useState(nullPokemon);\n  const [listPokemon, setListPokemon] = useState([]);\n  const [currentPageUrl, setCurrentPageUrl] = useState('https://pokeapi.co/api/v2/pokemon');\n  const [nextPageUrl, setNextPageUrl] = useState();\n  const [prevPageUrl, setPrevPageUrl] = useState();\n  const [loading, setLoading] = useState(true);\n  const [spriteUrl, setSpriteUrl] = useState();\n  const [pokemonName, setPokemonName] = useState('');\n  const [pokemonTypes, setPokemonTypes] = useState([]);\n  const [pokedexId, setPokedexId] = useState();\n  const [generation, setGeneration] = useState('');\n  const [currentRandomPokedexId, setCurrentRandomPokedexId] = useState();\n\n  useEffect(() => {\n    const pokedexId = Math.floor(Math.random() * 898);\n    setLoading(true);\n    setPokedexId(pokedexId);\n    // setCurrentRandomPokedexId(pokedexId);\n    Promise.all([GetPokemonInfo(pokedexId), GetPokemonSpeciesInfo(pokedexId)])\n      .then(results => {\n        setLoading(false);\n        const pokemon = results[0].data;\n        setSpriteUrl(pokemon.sprites.front_default);\n        setPokemonName(pokemon.name);\n        setPokemonTypes(pokemon.types.map(t => t.type.name));\n\n        const species = results[1].data;\n        setGeneration(species.generation.name);\n      });\n  }, []);\n\n  // useEffect(() => {\n  //   setLoading(true);\n  //   let cancel;\n  //   axios.get(currentPageUrl, {\n  //     cancelToken: new axios.CancelToken(c => cancel = c)\n  //   })\n  //     .then(res => {\n  //       setLoading(false);\n  //       setPrevPageUrl(res.data.previous);\n  //       setNextPageUrl(res.data.next);\n  //       setListPokemon(res.data.results.map(p => p.name));\n  //     })\n\n  //   return cancel;\n  // }, [currentPageUrl]);\n\n  // useEffect(() => {\n  //   GetPokemonInfo(currentRandomPokedexId);\n  // }, [currentRandomPokedexId]);\n\n  // useEffect(() => {\n  //   setCurrentSpriteUrl(pokemon.sprites.front_default);\n  // }, [pokemon]);\n\n  function GetPokemonInfo(pokedexId) {\n    // setLoading(true);\n    // let cancel;\n    return axios.get('https://pokeapi.co/api/v2/pokemon/' + pokedexId);\n      // .then(p => {\n      //   // setLoading(false);\n      //   // setPokemon(p.data);\n      //   const pokemon = p.data;\n      //   setSpriteUrl(pokemon.sprites.front_default);\n      //   setPokemonName(pokemon.name);\n      //   setPokemonTypes(pokemon.types.map(t => t.type.name));\n      // });\n      \n    // return cancel;\n  }\n\n  function GetPokemonSpeciesInfo(pokedexId) {\n    // setLoading(true);\n    // let cancel;\n    return axios.get('https://pokeapi.co/api/v2/pokemon-species/' + pokedexId);\n      // .then(p => {\n      //   // setLoading(false);\n      //   const pokemon = p.data;\n      //   setGeneration(pokemon.generation.name);\n      // });\n  }\n\n  // function gotoPrevPage() {\n  //   setCurrentPageUrl(prevPageUrl);\n  // }\n\n  // function gotoNextPage() {\n  //   setCurrentPageUrl(nextPageUrl);\n  // }\n\n  if (loading) return 'Loading...';\n\n  return (\n    <>\n      {/* <PokemonList pokemon={listPokemon}></PokemonList>\n      <Pagination\n        gotoPrevPage={prevPageUrl ? gotoPrevPage : null}\n        gotoNextPage={nextPageUrl ? gotoNextPage : null}\n      >\n      </Pagination> */}\n      <div>\n        {spriteUrl && <SpriteDisplay spriteUrl={spriteUrl} /> }\n      </div>\n      <div>\n        {pokemonName.replace(/\\b\\w/g, l => l.toUpperCase())}\n      </div>\n      <div>\n        Pokedex Number #{pokedexId}\n      </div>\n      <div>\n        {generation.replace(/\\b\\w/g, l => l.toUpperCase())}\n      </div>\n      <PokemonTypes types={pokemonTypes}></PokemonTypes>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}